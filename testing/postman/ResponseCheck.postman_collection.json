{
	"info": {
		"_postman_id": "0a7a33be-ce8a-46fa-8d9c-bdba289ad65b",
		"name": "ResponseCheck",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "30062806",
		"_collection_link": "https://crimson-station-911518.postman.co/workspace/new_apis~c14c52b6-29dd-40ca-8fbf-72f059c56b8c/collection/30062806-0a7a33be-ce8a-46fa-8d9c-bdba289ad65b?action=share&source=collection_link&creator=30062806"
	},
	"item": [
		{
			"name": "LockStatus",
			"item": [
				{
					"name": "Lock",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();\r",
									"\r",
									"// Check if status code is 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"if (responseBody.status === \"success\") {\r",
									"    pm.test(\"Test Case: Status is success\", function () {\r",
									"        pm.expect(responseBody.status).to.eql(\"success\");\r",
									"    });\r",
									"\r",
									"    pm.test(\"Response Body Matched to the schema\", function () {\r",
									"        // Parse the JSON schema from the collection variable\r",
									"        var schema = pm.collectionVariables.get(\"Lock/unlock\");\r",
									"        var expectedSchema = JSON.parse(schema);\r",
									"\r",
									"        // Check if the 'data' property exists\r",
									"        pm.expect(responseBody).to.have.property('data');\r",
									"\r",
									"        // Check if 'data' property matches the expected schema\r",
									"        pm.expect(responseBody.data).to.eql(expectedSchema);\r",
									"    });\r",
									"} else if (responseBody.status === \"error\") {\r",
									"    var errorMessage = responseBody.error.message,\r",
									"        errorCode = responseBody.error.code;\r",
									"\r",
									"    console.log(\"Error message: \" + errorMessage); // Display error message first\r",
									"    console.log(\"Error code: \" + errorCode);\r",
									"\r",
									"    tests[\"error code is: \" + errorCode + \" and Test Case: Status is error and error message is: \" + errorMessage] = false;\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Get the request body from a collection variable\r",
									"var requestBody = pm.collectionVariables.get(\"Requestbody\");\r",
									"\r",
									"// Send the request with the specified request body\r",
									"pm.sendRequest({\r",
									"    url: \"https://dev-cms.saven.in/user/verify/mpin\", // Specify the URL\r",
									"    method: 'POST', \r",
									"    header: { \r",
									"        'Content-Type': 'application/json' // Content type header for JSON\r",
									"    },\r",
									"    body: { \r",
									"        mode: 'raw', \r",
									"        raw: requestBody // Set the raw request body obtained from the collection variable\r",
									"    }\r",
									"}, function (err, response) { \r",
									"    if (err) { \r",
									"        console.error(err); \r",
									"        return; \r",
									"    }\r",
									"    \r",
									"    console.log(response.json()); \r",
									"    \r",
									"    // Extract the token from the response body\r",
									"    var responseBody = response.json();\r",
									"    var token = responseBody.data.token;\r",
									"    // Set the token as a collection variable\r",
									"    pm.collectionVariables.set(\"Cmstoken\", token);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Cmstoken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"kitNo\": \"93440000352\",\r\n    \"reason\": \"Lock Card\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Cmsurl}}/card/lock",
							"host": [
								"{{Cmsurl}}"
							],
							"path": [
								"card",
								"lock"
							]
						}
					},
					"response": []
				},
				{
					"name": "Getlist_locked",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();\r",
									"\r",
									"// Check if status code is 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"if (responseBody.status === \"success\") {\r",
									"    pm.test(\"Test Case: Status is success\", function () {\r",
									"        pm.expect(responseBody.status).to.eql(\"success\");\r",
									"    });\r",
									"\r",
									"    pm.test(\"Response Body Matched to the schema\", function () {\r",
									"        var schema = JSON.parse(pm.collectionVariables.get(\"Getlist\"));\r",
									"\r",
									"        schema.forEach(function(key) {\r",
									"            pm.expect(responseBody.data[0]).to.have.property(key);\r",
									"        });\r",
									"    });\r",
									"\r",
									"    pm.test(\"Card status is LOCKED\", function () {\r",
									"        pm.expect(responseBody.data[0].status).to.eql(\"LOCKED\");\r",
									"    });\r",
									"} else if (responseBody.status === \"error\") {\r",
									"    var errorMessage = responseBody.error.message,\r",
									"        errorCode = responseBody.error.code;\r",
									"\r",
									"    console.log(\"Error message: \" + errorMessage); // Display error message first\r",
									"    console.log(\"Error code: \" + errorCode);\r",
									"\r",
									"    tests[\"error code is: \" + errorCode + \" and Test Case: Status is error and error message is: \" + errorMessage] = false;\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Get the request body from a collection variable\r",
									"var requestBody = pm.collectionVariables.get(\"Requestbody\");\r",
									"\r",
									"// Send the request with the specified request body\r",
									"pm.sendRequest({\r",
									"    url: \"https://dev-cms.saven.in/user/verify/mpin\", // Specify the URL\r",
									"    method: 'POST', \r",
									"    header: { \r",
									"        'Content-Type': 'application/json' // Content type header for JSON\r",
									"    },\r",
									"    body: { \r",
									"        mode: 'raw', \r",
									"        raw: requestBody // Set the raw request body obtained from the collection variable\r",
									"    }\r",
									"}, function (err, response) { \r",
									"    if (err) { \r",
									"        console.error(err); \r",
									"        return; \r",
									"    }\r",
									"    \r",
									"    console.log(response.json()); \r",
									"    \r",
									"    // Extract the token from the response body\r",
									"    var responseBody = response.json();\r",
									"    var token = responseBody.data.token;\r",
									"    // Set the token as a collection variable\r",
									"    pm.collectionVariables.set(\"Cmstoken\", token);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Cmstoken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Cmsurl}}/card/get/list",
							"host": [
								"{{Cmsurl}}"
							],
							"path": [
								"card",
								"get",
								"list"
							]
						}
					},
					"response": []
				},
				{
					"name": "Unlock",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"if (responseBody.status === \"success\") {\r",
									"    tests[\"Test Case: Status is success\"] = true;\r",
									"} else if (responseBody.status === \"error\") {\r",
									"    var errorMessage = responseBody.error.message,\r",
									"        errorCode = responseBody.error.code;\r",
									"\r",
									"    console.log(\"Error message: \" + errorMessage); // Display error message first\r",
									"    console.log(\"Error code: \" + errorCode);\r",
									"\r",
									"    // Check if the error message and code match the expected values\r",
									"    if (errorMessage === \"The request body is invalid. See error object `details` property for more info.\" && errorCode === \"0\") {\r",
									"        tests[\"Test Case: Status is error and error message is correct. Error message: \" + errorMessage + \", Error code: \" + errorCode] = true;\r",
									"    } else {\r",
									"        tests[\"Error code is: \" + errorCode + \" and Test Case: Status is error and error message is: \" + errorMessage] = false;\r",
									"    }\r",
									"} \r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Get the request body from a collection variable\r",
									"var requestBody = pm.collectionVariables.get(\"Requestbody\");\r",
									"\r",
									"// Send the request with the specified request body\r",
									"pm.sendRequest({\r",
									"    url: \"https://dev-cms.saven.in/user/verify/mpin\", // Specify the URL\r",
									"    method: 'POST', \r",
									"    header: { \r",
									"        'Content-Type': 'application/json' // Content type header for JSON\r",
									"    },\r",
									"    body: { \r",
									"        mode: 'raw', \r",
									"        raw: requestBody // Set the raw request body obtained from the collection variable\r",
									"    }\r",
									"}, function (err, response) { \r",
									"    if (err) { \r",
									"        console.error(err); \r",
									"        return; \r",
									"    }\r",
									"    \r",
									"    console.log(response.json()); \r",
									"    \r",
									"    // Extract the token from the response body\r",
									"    var responseBody = response.json();\r",
									"    var token = responseBody.data.token;\r",
									"    // Set the token as a collection variable\r",
									"    pm.collectionVariables.set(\"Cmstoken\", token);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Cmstoken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"kitNo\": \"93440000352\",\r\n    \"reason\": \"Unlock Card\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Cmsurl}}/card/unlock",
							"host": [
								"{{Cmsurl}}"
							],
							"path": [
								"card",
								"unlock"
							]
						}
					},
					"response": []
				},
				{
					"name": "Getlist_allocated",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();\r",
									"\r",
									"// Check if status code is 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"if (responseBody.status === \"success\") {\r",
									"    pm.test(\"Test Case: Status is success\", function () {\r",
									"        pm.expect(responseBody.status).to.eql(\"success\");\r",
									"    });\r",
									"\r",
									"    pm.test(\"Response Body Matched to the schema\", function () {\r",
									"        var schema = JSON.parse(pm.collectionVariables.get(\"Getlist\"));\r",
									"\r",
									"        schema.forEach(function(key) {\r",
									"            pm.expect(responseBody.data[0]).to.have.property(key);\r",
									"        });\r",
									"    });\r",
									"\r",
									"    pm.test(\"Card status is ALLOCATED\", function () {\r",
									"        pm.expect(responseBody.data[0].status).to.eql(\"ALLOCATED\");\r",
									"    });\r",
									"} else if (responseBody.status === \"error\") {\r",
									"    var errorMessage = responseBody.error.message,\r",
									"        errorCode = responseBody.error.code;\r",
									"\r",
									"    console.log(\"Error message: \" + errorMessage); // Display error message first\r",
									"    console.log(\"Error code: \" + errorCode);\r",
									"\r",
									"    tests[\"error code is: \" + errorCode + \" and Test Case: Status is error and error message is: \" + errorMessage] = false;\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Get the request body from a collection variable\r",
									"var requestBody = pm.collectionVariables.get(\"Requestbody\");\r",
									"\r",
									"// Send the request with the specified request body\r",
									"pm.sendRequest({\r",
									"    url: \"https://dev-cms.saven.in/user/verify/mpin\", // Specify the URL\r",
									"    method: 'POST', \r",
									"    header: { \r",
									"        'Content-Type': 'application/json' // Content type header for JSON\r",
									"    },\r",
									"    body: { \r",
									"        mode: 'raw', \r",
									"        raw: requestBody // Set the raw request body obtained from the collection variable\r",
									"    }\r",
									"}, function (err, response) { \r",
									"    if (err) { \r",
									"        console.error(err); \r",
									"        return; \r",
									"    }\r",
									"    \r",
									"    console.log(response.json()); \r",
									"    \r",
									"    // Extract the token from the response body\r",
									"    var responseBody = response.json();\r",
									"    var token = responseBody.data.token;\r",
									"    // Set the token as a collection variable\r",
									"    pm.collectionVariables.set(\"Cmstoken\", token);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Cmstoken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Cmsurl}}/card/get/list",
							"host": [
								"{{Cmsurl}}"
							],
							"path": [
								"card",
								"get",
								"list"
							]
						}
					},
					"response": []
				},
				{
					"name": "Lock",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();\r",
									"\r",
									"// Check if status code is 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"if (responseBody.status === \"success\") {\r",
									"    pm.test(\"Test Case: Status is success\", function () {\r",
									"        pm.expect(responseBody.status).to.eql(\"success\");\r",
									"    });\r",
									"\r",
									"    pm.test(\"Response Body Matched to the schema\", function () {\r",
									"        // Parse the JSON schema from the collection variable\r",
									"        var schema = pm.collectionVariables.get(\"Lock/unlock\");\r",
									"        var expectedSchema = JSON.parse(schema);\r",
									"\r",
									"        // Check if the 'data' property exists\r",
									"        pm.expect(responseBody).to.have.property('data');\r",
									"\r",
									"        // Check if 'data' property matches the expected schema\r",
									"        pm.expect(responseBody.data).to.eql(expectedSchema);\r",
									"    });\r",
									"} else if (responseBody.status === \"error\") {\r",
									"    var errorMessage = responseBody.error.message,\r",
									"        errorCode = responseBody.error.code;\r",
									"\r",
									"    console.log(\"Error message: \" + errorMessage); // Display error message first\r",
									"    console.log(\"Error code: \" + errorCode);\r",
									"\r",
									"    tests[\"error code is: \" + errorCode + \" and Test Case: Status is error and error message is: \" + errorMessage] = false;\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Get the request body from a collection variable\r",
									"var requestBody = pm.collectionVariables.get(\"Requestbody\");\r",
									"\r",
									"// Send the request with the specified request body\r",
									"pm.sendRequest({\r",
									"    url: \"https://dev-cms.saven.in/user/verify/mpin\", // Specify the URL\r",
									"    method: 'POST', \r",
									"    header: { \r",
									"        'Content-Type': 'application/json' // Content type header for JSON\r",
									"    },\r",
									"    body: { \r",
									"        mode: 'raw', \r",
									"        raw: requestBody // Set the raw request body obtained from the collection variable\r",
									"    }\r",
									"}, function (err, response) { \r",
									"    if (err) { \r",
									"        console.error(err); \r",
									"        return; \r",
									"    }\r",
									"    \r",
									"    console.log(response.json()); \r",
									"    \r",
									"    // Extract the token from the response body\r",
									"    var responseBody = response.json();\r",
									"    var token = responseBody.data.token;\r",
									"    // Set the token as a collection variable\r",
									"    pm.collectionVariables.set(\"Cmstoken\", token);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Cmstoken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"kitNo\": \"93440000352\",\r\n    \"reason\": \"Lock Card\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Cmsurl}}/card/lock",
							"host": [
								"{{Cmsurl}}"
							],
							"path": [
								"card",
								"lock"
							]
						}
					},
					"response": []
				},
				{
					"name": "Getdetails_values_check_lock",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();\r",
									"\r",
									"// Check if status code is 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"if (responseBody.status === \"success\") {\r",
									"    pm.test(\"Test Case: Status is success\", function () {\r",
									"        pm.expect(responseBody.status).to.eql(\"success\");\r",
									"    });\r",
									"    pm.test(\"Response body matched with the lock card schema\", function () {\r",
									"        // Parse the JSON schema from the environment variable\r",
									"       // var schema = JSON.parse(pm.environment.get(\"GetDetails\"));\r",
									"\r",
									"        // pm.globals.get(\"variable_key\");\r",
									"        var schema=JSON.parse(pm.collectionVariables.get(\"Lockdeatils\"));\r",
									"        schema.forEach(function(key) {\r",
									"            pm.expect(responseBody.data).to.have.property(key);\r",
									"        });\r",
									"// Object.keys(responseBody.data).forEach(function(key) {\r",
									"        //     pm.expect(responseBody.data).to.have.property(key);\r",
									"        // });\r",
									"        \r",
									"        //Additional checks for specific values if needed\r",
									"        // pm.expect(\"validate\".responseBody.data.name).to.eql(\"Nishant Dixit\");\r",
									"        // pm.expect(responseBody.data.status).to.eql(\"ALLOCATED\");\r",
									"        // Add more expectations for other fields as needed...\r",
									"    });\r",
									"} else if (responseBody.status === \"error\") {\r",
									"    var errorMessage = responseBody.error.message,\r",
									"        errorCode = responseBody.error.code;\r",
									"\r",
									"    console.log(\"Error message: \" + errorMessage); // Display error message first\r",
									"    console.log(\"Error code: \" + errorCode);\r",
									"\r",
									"    tests[\" error code is: \" + errorCode + \" and Test Case: Status is error and error message is: \" + errorMessage] = false;\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Cmstoken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Cmsurl}}/card/get/details",
							"host": [
								"{{Cmsurl}}"
							],
							"path": [
								"card",
								"get",
								"details"
							]
						}
					},
					"response": []
				},
				{
					"name": "Unlock",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"if (responseBody.status === \"success\") {\r",
									"    tests[\"Test Case: Status is success\"] = true;\r",
									"} else if (responseBody.status === \"error\") {\r",
									"    var errorMessage = responseBody.error.message,\r",
									"        errorCode = responseBody.error.code;\r",
									"\r",
									"    console.log(\"Error message: \" + errorMessage); // Display error message first\r",
									"    console.log(\"Error code: \" + errorCode);\r",
									"\r",
									"    // Check if the error message and code match the expected values\r",
									"    if (errorMessage === \"The request body is invalid. See error object `details` property for more info.\" && errorCode === \"0\") {\r",
									"        tests[\"Test Case: Status is error and error message is correct. Error message: \" + errorMessage + \", Error code: \" + errorCode] = true;\r",
									"    } else {\r",
									"        tests[\"Error code is: \" + errorCode + \" and Test Case: Status is error and error message is: \" + errorMessage] = false;\r",
									"    }\r",
									"} \r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Cmstoken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"kitNo\": \"93440000352\",\r\n    \"reason\": \"Unlock Card\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Cmsurl}}/card/unlock",
							"host": [
								"{{Cmsurl}}"
							],
							"path": [
								"card",
								"unlock"
							]
						}
					},
					"response": []
				},
				{
					"name": "Getdetails_values_check_unlock",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();\r",
									"\r",
									"// Check if status code is 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"if (responseBody.status === \"success\") {\r",
									"    pm.test(\"Test Case: Status is success\", function () {\r",
									"        pm.expect(responseBody.status).to.eql(\"success\");\r",
									"    });\r",
									"    pm.test(\"Response body matched with the unlock card schema\", function () {\r",
									"        // Parse the JSON schema from the environment variable\r",
									"       // var schema = JSON.parse(pm.environment.get(\"GetDetails\"));\r",
									"\r",
									"        // pm.globals.get(\"variable_key\");\r",
									"        var schema=JSON.parse(pm.collectionVariables.get(\"Getdetails\"));\r",
									"        schema.forEach(function(key) {\r",
									"            pm.expect(responseBody.data).to.have.property(key);\r",
									"        });\r",
									"// Object.keys(responseBody.data).forEach(function(key) {\r",
									"        //     pm.expect(responseBody.data).to.have.property(key);\r",
									"        // });\r",
									"        \r",
									"        //Additional checks for specific values if needed\r",
									"        // pm.expect(\"validate\".responseBody.data.name).to.eql(\"Nishant Dixit\");\r",
									"        // pm.expect(responseBody.data.status).to.eql(\"ALLOCATED\");\r",
									"        // Add more expectations for other fields as needed...\r",
									"    });\r",
									"} else if (responseBody.status === \"error\") {\r",
									"    var errorMessage = responseBody.error.message,\r",
									"        errorCode = responseBody.error.code;\r",
									"\r",
									"    console.log(\"Error message: \" + errorMessage); // Display error message first\r",
									"    console.log(\"Error code: \" + errorCode);\r",
									"\r",
									"    tests[\" error code is: \" + errorCode + \" and Test Case: Status is error and error message is: \" + errorMessage] = false;\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Cmstoken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Cmsurl}}/card/get/details",
							"host": [
								"{{Cmsurl}}"
							],
							"path": [
								"card",
								"get",
								"details"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "SetlimitValueCheck",
			"item": [
				{
					"name": "Setlimit_setvalue",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse the request body to get the set limit amount\r",
									"const requestPayload = JSON.parse(pm.request.body.raw);\r",
									"const setLimitAmount = requestPayload.amount;\r",
									"\r",
									"// Send a request to the \"get limit\" API\r",
									"pm.sendRequest({\r",
									"    url: 'https://dev-cms.saven.in/card/get/limit',\r",
									"    method: 'GET',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json',\r",
									"        'Authorization': `Bearer ${pm.variables.get(\"Cmstoken\")}` // Use the collection variable 'Cmstoken'\r",
									"    }\r",
									"}, function (err, response) {\r",
									"    // Check if there's an error with the request\r",
									"    if (err) {\r",
									"        console.error(err);\r",
									"        return;\r",
									"    }\r",
									"\r",
									"    // Log success message after the get limit API call\r",
									"    pm.test(\"Get Limit API called successfully\", function () {\r",
									"        console.log(\"Get Limit API called successfully\");\r",
									"        pm.expect(true).to.equal(true); // Placeholder assertion to ensure the test always passes\r",
									"    });\r",
									"\r",
									"    // Parse the response body\r",
									"    const responseBody = response.json();\r",
									"\r",
									"    // Check if the response status is success\r",
									"    pm.test(\"Response status is success\", function () {\r",
									"        pm.expect(responseBody.status).to.equal(\"success\");\r",
									"    });\r",
									"\r",
									"    // Check if the total limit in the response matches the set limit amount\r",
									"    pm.test(\"Get limit api value matches the set limit request payload amount\", function () {\r",
									"        const totalLimitAmount = parseFloat(responseBody.data.totalLimit);\r",
									"        pm.expect(totalLimitAmount).to.equal(setLimitAmount);\r",
									"    });\r",
									"\r",
									"    // Check if other limit values are present and valid\r",
									"    pm.test(\"get limit values formats valid\", function () {\r",
									"        const availableLimit = parseFloat(responseBody.data.availableLimit);\r",
									"        const utilizedLimit = parseFloat(responseBody.data.utilizedLimit);\r",
									"\r",
									"        // Check if available limit and utilized limit are numbers\r",
									"        pm.expect(availableLimit).to.be.a('number');\r",
									"        pm.expect(utilizedLimit).to.be.a('number');\r",
									"\r",
									"        // Check if available limit + utilized limit equals total limit\r",
									"        //pm.expect(availableLimit + utilizedLimit).to.equal(setLimitAmount);\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Get the request body from a collection variable\r",
									"var requestBody = pm.collectionVariables.get(\"Requestbody\");\r",
									"\r",
									"// Send the request with the specified request body\r",
									"pm.sendRequest({\r",
									"    url: \"https://dev-cms.saven.in/user/verify/mpin\", // Specify the URL\r",
									"    method: 'POST', \r",
									"    header: { \r",
									"        'Content-Type': 'application/json' // Content type header for JSON\r",
									"    },\r",
									"    body: { \r",
									"        mode: 'raw', \r",
									"        raw: requestBody // Set the raw request body obtained from the collection variable\r",
									"    }\r",
									"}, function (err, response) { \r",
									"    if (err) { \r",
									"        console.error(err); \r",
									"        return; \r",
									"    }\r",
									"    \r",
									"    console.log(response.json()); \r",
									"    \r",
									"    // Extract the token from the response body\r",
									"    var responseBody = response.json();\r",
									"    var token = responseBody.data.token;\r",
									"    // Set the token as a collection variable\r",
									"    pm.collectionVariables.set(\"Cmstoken\", token);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Cmstoken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n \"amount\":1000\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Cmsurl}}/card/set/limit",
							"host": [
								"{{Cmsurl}}"
							],
							"path": [
								"card",
								"set",
								"limit"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "SetpreferenceValuesCheck",
			"item": [
				{
					"name": "Setpreference_values",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Send a request to the \"get preference\" API\r",
									"pm.sendRequest({\r",
									"    url: 'https://dev-cms.saven.in/card/get/preference',\r",
									"    method: 'GET',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json',\r",
									"        'Authorization': `Bearer ${pm.variables.get(\"Cmstoken\")}` // Use the same collection variable 'Cmstoken'\r",
									"    }\r",
									"}, function (err, response) {\r",
									"    // Log success message first\r",
									"    pm.test(\"Get Preference API called successfully\", function () {\r",
									"        console.log(\"Get Preference API called successfully\");\r",
									"        pm.expect(true).to.equal(true); // Placeholder assertion to ensure the test always passes\r",
									"    });\r",
									"\r",
									"    // Check if there's an error with the request\r",
									"    if (err) {\r",
									"        console.error(err);\r",
									"        pm.test(\"Error occurred while calling the Get Preference API\", function() {\r",
									"            pm.expect.fail(\"Error occurred while calling the Get Preference API\");\r",
									"        });\r",
									"    } else {\r",
									"        // Parse the response body\r",
									"        const responseBody = response.json();\r",
									"\r",
									"        // Check if the response status is success\r",
									"        pm.test(\"Response status is success\", function () {\r",
									"            pm.expect(responseBody.status).to.equal(\"success\");\r",
									"        });\r",
									"\r",
									"        // Check if domestic and international preferences are present\r",
									"        pm.test(\"Domestic preference values match with set preference request body\", function () {\r",
									"            pm.expect(responseBody.data.domestic).to.exist;\r",
									"        });\r",
									"\r",
									"        pm.test(\"International preference values match with set preference request body\", function () {\r",
									"            pm.expect(responseBody.data.international).to.exist;\r",
									"        });\r",
									"\r",
									"        // Check specific preferences for domestic and international\r",
									"        pm.test(\"Domestic preference values formats are valid with the set preference request payload value in get preference\", function () {\r",
									"            const domesticPreferences = responseBody.data.domestic;\r",
									"            pm.expect(domesticPreferences.atm).to.be.a('boolean');\r",
									"            pm.expect(domesticPreferences.ecom).to.be.a('boolean');\r",
									"            pm.expect(domesticPreferences.pos).to.be.a('boolean');\r",
									"            pm.expect(domesticPreferences.contactless).to.be.a('boolean');\r",
									"\r",
									"            domesticPreferences.limitConfig.forEach((limitConfig) => {\r",
									"                pm.expect(limitConfig.txnType).to.be.oneOf(['ECOM', 'POS', 'ATM']);\r",
									"                pm.expect(parseFloat(limitConfig.dailyLimitValue)).to.be.a('number');\r",
									"                pm.expect(parseFloat(limitConfig.dailyLimitCnt)).to.be.a('number');\r",
									"                pm.expect(parseFloat(limitConfig.maxAmount)).to.be.a('number');\r",
									"            });\r",
									"        });\r",
									"\r",
									"        pm.test(\"International preference values formats are valid with the set preference request payload values in get preference \", function () {\r",
									"            const internationalPreferences = responseBody.data.international;\r",
									"            pm.expect(internationalPreferences.atm).to.be.a('boolean');\r",
									"            pm.expect(internationalPreferences.ecom).to.be.a('boolean');\r",
									"            pm.expect(internationalPreferences.pos).to.be.a('boolean');\r",
									"            pm.expect(internationalPreferences.contactless).to.be.a('boolean');\r",
									"\r",
									"            internationalPreferences.limitConfig.forEach((limitConfig) => {\r",
									"                pm.expect(limitConfig.txnType).to.be.oneOf(['ECOM', 'POS', 'ATM']);\r",
									"                pm.expect(parseFloat(limitConfig.dailyLimitValue)).to.be.a('number');\r",
									"                pm.expect(parseFloat(limitConfig.dailyLimitCnt)).to.be.a('number');\r",
									"                pm.expect(parseFloat(limitConfig.maxAmount)).to.be.a('number');\r",
									"                pm.expect(limitConfig.transactionUsageType).to.equal(\"INTERNATIONAL\");\r",
									"            });\r",
									"        });\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Get the request body from a collection variable\r",
									"var requestBody = pm.collectionVariables.get(\"Requestbody\");\r",
									"\r",
									"// Send the request with the specified request body\r",
									"pm.sendRequest({\r",
									"    url: \"https://dev-cms.saven.in/user/verify/mpin\", // Specify the URL\r",
									"    method: 'POST', \r",
									"    header: { \r",
									"        'Content-Type': 'application/json' // Content type header for JSON\r",
									"    },\r",
									"    body: { \r",
									"        mode: 'raw', \r",
									"        raw: requestBody // Set the raw request body obtained from the collection variable\r",
									"    }\r",
									"}, function (err, response) { \r",
									"    if (err) { \r",
									"        console.error(err); \r",
									"        return; \r",
									"    }\r",
									"    \r",
									"    console.log(response.json()); \r",
									"    \r",
									"    // Extract the token from the response body\r",
									"    var responseBody = response.json();\r",
									"    var token = responseBody.data.token;\r",
									"    // Set the token as a collection variable\r",
									"    pm.collectionVariables.set(\"Cmstoken\", token);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Cmstoken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"domestic\": {\r\n        \"ecom\": true,\r\n        \"atm\": true,\r\n        \"pos\": false,\r\n        \"contactless\": true,\r\n        \"international\": true,\r\n        \"limitConfigs\": [\r\n            {\r\n                \"txnType\": \"ECOM\",\r\n                \"dailyLimitValue\": 500,\r\n                \"dailyLimitCnt\": 21,\r\n                \"maxAmount\": 100\r\n            },\r\n            {\r\n                 \"txnType\": \"POS\",\r\n                 \"dailyLimitValue\": 4000,\r\n                 \"dailyLimitCnt\": 200,\r\n                 \"maxAmount\": 50000\r\n             },\r\n             {\r\n                 \"txnType\": \"ECOM\",\r\n                 \"dailyLimitValue\": 1000,\r\n                 \"dailyLimitCnt\": 20,\r\n                 \"maxAmount\": 1000\r\n             }\r\n        ]\r\n    },\r\n\r\n     \"international\": {\r\n         \"ecom\": true,\r\n         \"atm\": true,\r\n         \"pos\": false,\r\n        \"contactless\": true,\r\n         \"international\": true,\r\n         \"limitConfigs\": [\r\n            {\r\n                 \"txnType\": \"ATM\",\r\n                 \"dailyLimitValue\": 5,\r\n                 \"dailyLimitCnt\": 21,\r\n                 \"maxAmount\": 1\r\n             },\r\n             {\r\n                 \"txnType\": \"POS\",\r\n                 \"dailyLimitValue\": 200,\r\n                 \"dailyLimitCnt\": 20,\r\n                 \"maxAmount\": 10000\r\n             },\r\n             {\r\n                 \"txnType\": \"ECOM\",\r\n                 \"dailyLimitValue\": 1000,\r\n                 \"dailyLimitCnt\": 20,\r\n                 \"maxAmount\": 2000\r\n             }\r\n         ]\r\n     }\r\n\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Cmsurl}}/card/set/preference",
							"host": [
								"{{Cmsurl}}"
							],
							"path": [
								"card",
								"set",
								"preference"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "Cmsurl",
			"value": "https://dev-cms.saven.in/",
			"type": "string"
		},
		{
			"key": "Cmstoken",
			"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJkYXRhIjoiYjU0ZGVhYmFjYjNjYjI2NWZlNGZkM2U1MGUxZWFmYTliY2Y0M2M0YmMyMWRlMjcwNjljMTczM2I3Y2NjYzJkNTZiODQ2MWJiMmNjNjJiYzU5ZjJkNzEwOWRhYzJkNWExY2VlZDlkNGM1NzQxYjM2YjFlMzY1MmZhZDc1ZTIyZGE5NjlmMTMzN2EyOGNkMjhlY2E0NjJlNGIyNWYwODk2M2JmNTU5MTM2NDMyYmZhNjM0MDQxZTNkNzI5MThlMWQ5OGU0Yzg5YmU5ZTA3NWNlMGQwNWFlOWZiZGJhYTI3MjdhMzViOTkwNDM3ZmIzYTBmYmYwMDc3NjU3YTU2YmM4ZmE4ODgzMzhhMDczOTk3ODkwYzA2YjA5ZjM3MGYzMjUwODEwYTc3YWM3NWY2NjNkMzZlZDJlNjYzMGUxY2NjMTNkMjdjZGY2MDBiM2NhYTkwZjdlNmRjMDZmZGFiMDNmZGQ1NzYyMTQwMzk2M2U2MjE5YzEwODYyMjJmYTVlOWY0YTI0YTM0ZTg1NGI5ODY3ZjdlODE2MTA1ZmYzZmM5MDgxNTMwOTU2NTI2NmU0Y2NkNTUzODk3NzMxOWQ1ZDNjZDZiMzkzZmExMjMxODY2YmZjYWNjZDkwNmFmZjkzODRkNzdhNTU3Y2M1ZGNlNzY2ZjA3NTVkMTE4ZGEzNWVkYWJhZDk0NmYyODFiNWRjNGU4NmY1NDI1N2QyOWZmMWNkNmExMWIxNTFhMDA4OTJjZTQ5N2UyZjI5NTNkNmY5ODFhNWU4ZDYzZTMyMWFjMmQxYTIwOWRlZGIwYTdiYTQwMjQyY2FlNTMwYmJlZDU0MzZiM2MxMjQyMmZjMmNlNTA5MzUyMmUxMGJlOWQ0MTFlNDdjYTkxNGM0MzBlNWI2YTUzNjg2MTkyMzEwZTJmNWZmNTRkZWU5OGFjZmI2NTA2MGVhODA0NzBkNWQxMzZmZjJkM2Y0ZWI5Y2NmNjM2Mjg5NzRjOGRmZTNlMjg4MDExNTczNWZjMTBkNDQ0MGY5ZTQ1OGRkYzM3OTlkNTY4YjI4ODExODVhM2NmOGYxZmVmMWM5MWNiMDY1YTk3NjczNDcxNGQzODgyYzlmNzkwOTc5NjBkNmViNDc2YTRiNTQ3NDRmYmY3ZmQ5YTU3ZDhhNzA2NWE0ZDhlMTYxNDQzNDJmYTI0YmMyYWQxZjBlZTY5MzM1ZWJiMmMxNWRhZDg0YjA4ZTk2Y2Q5NmZiMzllNTVlMjVmOGM1YjQwYmY1YjMzZjk4NTlmNjYxMmM0ZjgzMmUxY2RjNDc3N2I1NDI0YTljZDhjM2FkMWZlYmI4OTE0YWVjYWVlOWM3ZDUxMGQxM2Y1MzY5NjliNTc1YjVlN2Q5Ynw3ZWM5YjMxYjNjNjAzYmVhODdkNjk1NWIxZGJjMDRjYyIsImlhdCI6MTcxMTk1MDY5NSwiZXhwIjoxNzExOTUyNDk1fQ.Pt9uP6YNByBmbKBKe1nlHvacHvDNX_3vuV5CTGv2Xao",
			"type": "string"
		},
		{
			"key": "Cmswrongtoken",
			"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJkYXRhIjoiYjU0ZGVhYmFjYjNjYjI2NWZlNGZkM2U1MGUxZWFmYTliY2Y0M2M0YmMyMWRlMjcwNjljMTczM2I3Y2NjYzJkNTZiODQ2MWJiMmNjNjJiYzU5ZjJkNzEwOWRhYzJkNWExY2VlZDlkNGM1NzQxYjM2YjFlMzY1MmZhZDc1ZTIyZGE5NjlmMTMzN2EyOGNkMjhlY2E0NjJlNGIyNWYwODk2M2JmNTU5MTM2NDMyYmZhNjM0MDQxZTNkNzI5MThlMWQ5OGU0Yzg5YmU5ZTA3NWNlMGQwNWFlOWZiZGJhYTI3MjdhMzViOTkwNDM3ZmIzYTBmYmYwMDc3NjU3YTU2YmM4ZmE4ODgzMzhhMDczOTk3ODkwYzA2YjA5ZjM3MGYzMjUwODEwYTc3YWM3NWY2NjNkMzZlZDJlNjYzMGUxY2NjMTNkMjdjZGY2MDBiM2NhYTkwZjdlNmRjMDZmZGFiMDNmZGQ1NzYyMTQwMzk2M2U2MjE5YzEwODYyMjJmYTVlOWY0YTI0YTM0ZTg1NGI5ODY3ZjdlODE2MTA1ZmYzZmM5MDgxNTMwOTU2NTI2NmU0Y2NkNTUzODk3NzMxOWQ1ZDNjZDZiMzkzZmExMjMxODY2YmZjYWNjZDkwNmFmZjkzODRkNzdhNTU3Y2M1ZGNlNzY2ZjA3NTVkMTE4ZGEzNWVkYWJhZDk0NmYyODFiNWRjNGU4NmY1NDI1N2QyOWZmMWNkNmExMWIxNTFhMDA4OTJjZTQ5N2UyZjI5NTNkNmY5ODFhNWU4ZDYzZTMyMWFjMmQxYTIwOWRlZGIwYTdiYTQwMjQyY2FlNTMwYmJlZDU0MzZiM2MxMjQyMmZjMmNlNTA5MzUyMmUxMGJlOWQ0MTFlNDdjYTkxNGM0MzBlNWI2YTUzNjg2MTkyMzEwZTJmNWZmNTRkZWU5OGFjZmI2NTA2MGVhODA0NzBkNWQxMzZmZjJkM2Y0ZWI5Y2NmNjM2Mjg5NzRjOGRmZTNlMjg4MDExNTczNWZjMTBkNDQ0MGY5ZTQ1OGRkYzM3OTlkNTY4YjI4ODExODVhM2NmOGYxZmVmMWM5MWNiMDY1YTk3NjczNDcxNGQzODgyYzlmNzkwOTc5NjBkNmViNDc2YTRiNTQ3NDRmYmY3ZmQ5YTU3ZDhhNzA2NWE0ZDhlMTYxNDQzNDJmYTI0YmMyYWQxZjBlZTY5MzM1ZWJiMmMxNWRhZDg0YjA4ZTk2Y2Q5NmZiMzllNTVlMjVmOGM1YjQwYmY1YjMzZjk4NTlmNjYxMmM0ZjgzMmUxY2RjNDc3N2I1NDI0YTljZDhjM2FkMWZlYmI4OTE0YWVjYWVlOWM3ZDUxMGQxM2Y1MzY5NjliNTc1YjVlN2Q5Ynw3ZWM5YjMxYjNjNjAzYmVhODdkNjk1NWIxZGJjMDRjYyIsImlhdCI6MTcxMTk1MDY5NSwiZXhwIjoxNzExOTUyNDk1fQ.Pt9uP6YNByBmbKBKe1nlHvacHvDNX_3vuV5CTGv2Xao",
			"type": "string"
		},
		{
			"key": "Gettransactionstatus",
			"value": "[\"amount\",\"transactionDate\",\"externalTransactionId\",\"transactionOrigin\",\"billedStatus\",\"authorizationStatus\",\"kitNo\",\"postTransactionLimit\",\"description\",\"transactionType\"]",
			"type": "string"
		},
		{
			"key": "Getunbilledtransactions",
			"value": "[\"amount\",\"transactionDate\",\"externalTransactionId\",\"internalTransactionId\",\"description\",\"transactionType\"]",
			"type": "string"
		},
		{
			"key": "Setpin",
			"value": "[\"status\"]",
			"type": "string"
		},
		{
			"key": "Setlimit",
			"value": "[\"status\"]",
			"type": "string"
		},
		{
			"key": "Getpreference",
			"value": "[\"domestic.atm\",\"domestic.ecom\",\"domestic.pos\",\"domestic.contactless\",\"domestic.limitConfig\",\"international.atm\",\"international.ecom\",\"international.pos\",\"international.contactless\",\"international.limitConfig\"]",
			"type": "string"
		},
		{
			"key": "Getcvv",
			"value": "[\"cvv\"]",
			"type": "string"
		},
		{
			"key": "Upgradelimit",
			"value": "[\"status\"]",
			"type": "string"
		},
		{
			"key": "Getdetails",
			"value": "[\"name\",\"dob\",\"kitNo\",\"cardNo\",\"partialCardNo\",\"isPinSetup\",\"cardType\",\"networkType\",\"status\",\"cardExpiry\",\"cardIssueDate\"]",
			"type": "string"
		},
		{
			"key": "Getlist",
			"value": "[\"kitNo\",\"cardNo\",\"partialCardNo\",\"isPinSetup\",\"cardType\",\"networkType\",\"status\",\"cardExpiry\",\"cardIssueDate\"]",
			"type": "string"
		},
		{
			"key": "Getlimit",
			"value": "[\"totalLimit\",\"availableLimit\",\"utilizedLimit\"]",
			"type": "string"
		},
		{
			"key": "Getbalance",
			"value": "[\"productId\",\"balance\",\"lienBalance\"]",
			"type": "string"
		},
		{
			"key": "Getstatement",
			"value": "[\"transactions\",\"statement.amount\",\"statement.totalCreditAmount\",\"statement.totalDebitAmount\",\"statement.minimumDueAmount\",\"statement.statementDate\",\"statement.startDate\",\"statement.customerDueDate\",\"statement.lastStatementBalance\",\"statement.paymentStatus\",\"statement.finance\",\"statement.finance.interest\",\"statement.finance.tax\",\"statement.finance.fees\",\"statement.purchase\",\"statement.purchase.amount\",\"statement.purchase.cash\",\"statement.emi\",\"statement.emi.debit\",\"statement.emi.principle\",\"statement.emi.interest\",\"statement.emi.otherCharges\",\"statement.emi.limitBlockedAmount\"]",
			"type": "string"
		},
		{
			"key": "Getdue",
			"value": "[\"minDue\",\"totalDue\",\"dueDate\",\"paymentMade\",\"unbilledAmount\",\"interestAccumulated\",\"totalOutStandingAmount\",\"currentStatementDate\",\"nextStatementDate\",\"unpaidMinDue\",\"unpaidTotalDue\",\"unpaidMinDueBeforeDue\",\"unpaidTotalDueBeforeDue\",\"excessPayment\",\"postedEmi.emiTotalAmount\",\"postedEmi.principal\",\"postedEmi.interest\",\"postedEmi.otherCharges\",\"unpaidPostedEmi.emiTotalAmount\",\"unpaidPostedEmi.principal\",\"unpaidPostedEmi.interest\",\"unpaidPostedEmi.otherCharges\"]",
			"type": "string"
		},
		{
			"key": "Setpreference",
			"value": "[\"domestic\"]",
			"type": "string"
		},
		{
			"key": "Lock/unlock",
			"value": "\"success\"",
			"type": "string"
		},
		{
			"key": "Block",
			"value": "true",
			"type": "string"
		},
		{
			"key": "Changebillingcycle",
			"value": "[\"billingDate\",\"paymentDate\",\"eligible\"]",
			"type": "string"
		},
		{
			"key": "Loaneligible_emitransactions",
			"value": "[    \"amount\",    \"txnAmount\",    \"merchantName\",    \"extTxnId\",    \"description\",    \"transactionDate\",    \"singleEmi\",    \"groupEmi\"]",
			"type": "string"
		},
		{
			"key": "Loangetlist",
			"value": "[\"actualLoanId\",\"loanId\",\"loanAmount\",\"interestRate\",\"tenure\",\"emiAmount\",\"brokenPeriodInterest\",\"totalPrincipal\",\"principalOverdue\",\"principalPaid\",\"principalOutstanding\",\"totalPaid\",\"totalInterest\",\"interestOutstanding\",\"interestOverdue\",\"interestWaived\",\"interestPaid\",\"totalFee\",\"feeOverdue\",\"feeOutstanding\",\"feeWaived\",\"totalFeePaid\",\"totalTax\",\"processingFee\",\"processingFeeTax\",\"numberOfDueRepayments\",\"numberOfPaidRepayments\",\"numberOfRepayments\",\"disbursedDate\",\"discountAmount\",\"totalRepayment\",\"totalExpectedRepayment\",\"totalOutstanding\",\"totalOverDue\",\"totalWaivedOff\",\"loanStatus\",\"isLoanCancelApplicable\",\"isLoanRescheduleApplicable\",\"isLoanPreClosureApplicable\",\"description\",\"category\",\"loanProductId\",\"created\",\"refundDetails\",\"currentAmortizations.installmentNo\",\"currentAmortizations.dueDate\",\"currentAmortizations.principal\",\"currentAmortizations.principalPaid\",\"currentAmortizations.principalOutstanding\",\"currentAmortizations.principalLoanBalanceOutstanding\",\"currentAmortizations.daysInPeriod\",\"currentAmortizations.interest\",\"currentAmortizations.interestPaid\",\"currentAmortizations.interestOutstanding\",\"currentAmortizations.interestWaived\",\"currentAmortizations.fee\",\"currentAmortizations.feePaid\",\"currentAmortizations.feeWaived\",\"currentAmortizations.feeOutstanding\",\"currentAmortizations.closingPrincipalAmount\",\"currentAmortizations.totalDue\",\"currentAmortizations.totalPaid\",\"currentAmortizations.totalOutstanding\",\"currentAmortizations.totalWaived\",\"currentAmortizations.tax\",\"currentAmortizations.installmentAmount\",\"currentAmortizations.complete\",\"originalAmortizations.installmentNo\",\"originalAmortizations.dueDate\",\"originalAmortizations.principal\",\"originalAmortizations.principalPaid\",\"originalAmortizations.principalOutstanding\",\"originalAmortizations.principalLoanBalanceOutstanding\",\"originalAmortizations.daysInPeriod\",\"originalAmortizations.interest\",\"originalAmortizations.interestPaid\",\"originalAmortizations.interestOutstanding\",\"originalAmortizations.interestWaived\",\"originalAmortizations.fee\",\"originalAmortizations.feePaid\",\"originalAmortizations.feeWaived\",\"originalAmortizations.feeOutstanding\",\"originalAmortizations.closingPrincipalAmount\",\"originalAmortizations.totalDue\",\"originalAmortizations.totalPaid\",\"originalAmortizations.totalOutstanding\",\"originalAmortizations.totalWaived\",\"originalAmortizations.tax\",\"originalAmortizations.installmentAmount\",\"originalAmortizations.complete\",\"transactions.extTxnId\",\"transactions.txnAmount\",\"transactions.amount\",\"transactions.description\",\"transactions.transactionDate\",\"transactions.mcc\",\"transactions.txnType\",\"transactions.subTxnType\",\"transactions.txnOrigin\",\"transactions.merchantName\"]",
			"type": "string"
		},
		{
			"key": "GettransactionstatusRequestbody",
			"value": "[\"fromDate\": \"2000-11-11\",\"toDate\": \"2024-11-11\"]",
			"type": "string"
		},
		{
			"key": "fromDate",
			"value": "2000-11-11",
			"type": "string"
		},
		{
			"key": "toDate",
			"value": "2024-11-11",
			"type": "string"
		},
		{
			"key": "Mpinverify",
			"value": "[\"status\",\"token\"]",
			"type": "string"
		},
		{
			"key": "Lockdeatils",
			"value": "[\"name\",\"dob\"]",
			"type": "string"
		},
		{
			"key": "Requestbody",
			"value": "{\"mobileNumber\":\"+919700000001\",\"pin\":\"1234\"}",
			"type": "string"
		}
	]
}